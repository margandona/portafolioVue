/**
 * Test directo de Transbank para Sprint 1
 */
require('dotenv').config();
const { TransbankPaymentService } = require('./services/transbankPaymentService');

async function testTransbankDirecto() {
  console.log('üß™ Test directo de Transbank - Sprint 1\n');
  
  try {
    // Crear servicio
    const tbk = new TransbankPaymentService();
    
    // Datos de prueba
    const saleId = 'sprint1_' + Date.now();
    const amount = 25000; // $25.000 CLP
    const returnUrl = 'http://localhost:8080/payment/transbank/return';
    
    console.log('üìã Creando transacci√≥n de prueba:');
    console.log(`   Sale ID: ${saleId}`);
    console.log(`   Monto: $${amount.toLocaleString('es-CL')} CLP`);
    console.log(`   Return URL: ${returnUrl}\n`);
    
    // Crear transacci√≥n
    const transaction = await tbk.createTransaction(saleId, amount, returnUrl);
    
    console.log('‚úÖ ¬°TRANSACCI√ìN CREADA EXITOSAMENTE!\n');
    console.log('üîó DATOS DE LA TRANSACCI√ìN:');
    console.log(`   Token: ${transaction.token}`);
    console.log(`   URL de Pago: ${transaction.url}`);
    console.log(`   Buy Order: ${transaction.buyOrder}`);
    console.log(`   Session ID: ${transaction.sessionId}\n`);
    
    console.log('üåê PRUEBA EL PAGO COMPLETO:');
    console.log('1. Abre esta URL en tu navegador:');
    console.log(`   ${transaction.url}`);
    console.log('\n2. Usa esta tarjeta de prueba:');
    console.log('   N√∫mero: 4051 8856 0829 0648');
    console.log('   CVV: 123');
    console.log('   Fecha: 12/26 (o cualquier fecha futura)');
    console.log('\n3. Autoriza el pago y ser√°s redirigido a:');
    console.log(`   ${returnUrl}?token_ws=${transaction.token}`);
    
    console.log('\nüîÑ Para confirmar la transacci√≥n despu√©s del pago:');
    console.log(`   node test-transbank-sprint1.js confirm ${transaction.token}`);
    
    return transaction.token;
    
  } catch (error) {
    console.error('‚ùå Error en test de Transbank:', error.message);
    return null;
  }
}

async function confirmarTransaccion(token) {
  console.log('üîç Confirmando transacci√≥n...\n');
  
  try {
    const tbk = new TransbankPaymentService();
    const result = await tbk.confirmTransaction(token);
    
    console.log('‚úÖ ¬°TRANSACCI√ìN CONFIRMADA EXITOSAMENTE!\n');
    console.log('üí≥ DETALLES DEL PAGO:');
    console.log(`   Estado: ${result.status}`);
    console.log(`   C√≥digo de Autorizaci√≥n: ${result.authorizationCode}`);
    console.log(`   Monto: $${result.amount?.toLocaleString('es-CL')} CLP`);
    console.log(`   Fecha: ${result.transactionDate}`);
    console.log(`   Orden de Compra: ${result.buyOrder}`);
    
    if (result.cardDetail) {
      console.log(`\nüí≥ DETALLES DE LA TARJETA:`);
      console.log(`   Tipo: ${result.cardDetail.cardType}`);
      console.log(`   N√∫mero: ***${result.cardDetail.cardNumber}`);
    }
    
    console.log('\nüéâ ¬°EL SISTEMA DE PAGOS TRANSBANK EST√Å FUNCIONANDO PERFECTAMENTE!');
    console.log('‚úÖ Sprint 1 - Integraci√≥n Transbank: COMPLETADO');
    
  } catch (error) {
    console.error('‚ùå Error confirmando transacci√≥n:', error.message);
    
    if (error.message.includes('Token not found') || error.message.includes('Transaction not found')) {
      console.log('\nüí° Esto puede significar que:');
      console.log('   ‚Ä¢ El token expir√≥ (10 minutos)');
      console.log('   ‚Ä¢ El pago no se complet√≥ en Transbank');
      console.log('   ‚Ä¢ El usuario cancel√≥ el pago');
    }
  }
}

// Ejecutar
async function main() {
  const args = process.argv.slice(2);
  
  if (args[0] === 'confirm' && args[1]) {
    await confirmarTransaccion(args[1]);
  } else {
    await testTransbankDirecto();
  }
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = { testTransbankDirecto, confirmarTransaccion };
